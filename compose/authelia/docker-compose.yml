services:
  authelia:
    image: authelia/authelia
    hostname: authelia
    container_name: authelia
    restart: unless-stopped
    networks:
      - traefik_network
    depends_on:
      - traefik
      - openldap
    environment:
      TZ: $TZ
      X_AUTHELIA_CONFIG_FILTERS: template
      AUTHELIA_SERVER_BUFFERS_READ: 16384
      AUTHELIA_SERVER_BUFFERS_WRITE: 16384
      AUTHELIA_LOG_LEVEL: info
      AUTHELIA_LOG_FORMAT: text
      AUTHELIA_LOG_FILE_PATH: /logs/authelia/authelia.log
      AUTHELIA_LOG_KEEP_STDOUT: false
      AUTHELIA_REGULATION_MAX_RETRIES: 10
      AUTHELIA_REGULATION_FIND_TIME: 2 minutes
      AUTHELIA_REGULATION_BAN_TIME: 3 minutes
      AUTHELIA_SERVER_ADDRESS: :${AUTHELIA_PORT}
      AUTHELIA_THEME: dark
      AUTHELIA_TOTP_ISSUER: authelia.com
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ATTRIBUTES_GROUP_NAME: cn
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_IMPLEMENTATION: custom
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ADDRESS: ldaps://openldap
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_START_TLS: false
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_TLS_SKIP_VERIFY: true
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_TLS_MINIMUM_VERSION: TLS1.2
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_BASE_DN: ${LDAP_BASE_DN}
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ADDITIONAL_USERS_DN: ou=people
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USERS_FILTER: (&({username_attribute}={input})(objectClass=person))
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_ADDITIONAL_GROUPS_DN: ou=groups
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_GROUPS_FILTER: (&(uniquemember={dn})(objectclass=groupOfUniqueNames))
      AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USER: cn=${LDAP_ADMIN_USER},${LDAP_BASE_DN}
      DOMAINNAME: ${DOMAINNAME}
      LDAP_ADMIN_PASSWORD: ${LDAP_ADMIN_PASSWORD}
      CUST_AUTHELIA_PREFIX: ${AUTHELIA_PREFIX}
    entrypoint: |
      sh -c '
      set -e
      
      SECRETS_DIR="/lostack_secrets"
      
      # Create secrets directory if it doesn''t exist
      mkdir -p "$$SECRETS_DIR"
      
      # Function to generate a random key
      generate_key() {
          local length=$${1:-64}
          dd if=/dev/urandom bs=1 count=$$length 2>/dev/null | base64 | tr -d "\n" | head -c $$length
      }
      
      # Function to generate or read secret
      get_or_create_secret() {
          local secret_name="$$1"
          local secret_file="$$SECRETS_DIR/$$secret_name"
          
          if [ ! -f "$$secret_file" ]; then
              echo "Generating new secret: $$secret_name"
              generate_key 64 > "$$secret_file"
              chmod 600 "$$secret_file"
          else
              echo "Using existing secret: $$secret_name"
          fi
          
          cat "$$secret_file"
      }
      
      # Generate or read required secrets
      echo "Initializing Authelia secrets..."
      
      export CUST_AUTHELIA_JWT_SECRET=$$(get_or_create_secret "jwt_secret")
      export CUST_AUTHELIA_STORAGE_ENCRYPTION_KEY=$$(get_or_create_secret "storage_encryption_key")
      export CUST_AUTHELIA_SESSION_SECRET=$$(get_or_create_secret "session_secret")
      
      echo "Secrets initialized successfully"
      echo "Starting Authelia..."
      exec /app/entrypoint.sh
      '